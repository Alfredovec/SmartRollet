//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BusinessLogic.Concrete.RolletRepository {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Rollet", Namespace="http://schemas.datacontract.org/2004/07/DataAccess.Models.Entities")]
    [System.SerializableAttribute()]
    public partial class Rollet : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int HeightField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LighterIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LighterStateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RolletStateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int WidthField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Height {
            get {
                return this.HeightField;
            }
            set {
                if ((this.HeightField.Equals(value) != true)) {
                    this.HeightField = value;
                    this.RaisePropertyChanged("Height");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LighterId {
            get {
                return this.LighterIdField;
            }
            set {
                if ((this.LighterIdField.Equals(value) != true)) {
                    this.LighterIdField = value;
                    this.RaisePropertyChanged("LighterId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LighterState {
            get {
                return this.LighterStateField;
            }
            set {
                if ((this.LighterStateField.Equals(value) != true)) {
                    this.LighterStateField = value;
                    this.RaisePropertyChanged("LighterState");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RolletState {
            get {
                return this.RolletStateField;
            }
            set {
                if ((this.RolletStateField.Equals(value) != true)) {
                    this.RolletStateField = value;
                    this.RaisePropertyChanged("RolletState");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((this.UserIdField.Equals(value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Width {
            get {
                return this.WidthField;
            }
            set {
                if ((this.WidthField.Equals(value) != true)) {
                    this.WidthField = value;
                    this.RaisePropertyChanged("Width");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="RolletRepository.IRolletRepository")]
    public interface IRolletRepository {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRolletRepository/GetRollets", ReplyAction="http://tempuri.org/IRolletRepository/GetRolletsResponse")]
        BusinessLogic.Concrete.RolletRepository.Rollet[] GetRollets(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRolletRepository/GetRollets", ReplyAction="http://tempuri.org/IRolletRepository/GetRolletsResponse")]
        System.Threading.Tasks.Task<BusinessLogic.Concrete.RolletRepository.Rollet[]> GetRolletsAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRolletRepository/UpdateRollet", ReplyAction="http://tempuri.org/IRolletRepository/UpdateRolletResponse")]
        void UpdateRollet(BusinessLogic.Concrete.RolletRepository.Rollet rollet);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRolletRepository/UpdateRollet", ReplyAction="http://tempuri.org/IRolletRepository/UpdateRolletResponse")]
        System.Threading.Tasks.Task UpdateRolletAsync(BusinessLogic.Concrete.RolletRepository.Rollet rollet);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRolletRepository/ChangePosition", ReplyAction="http://tempuri.org/IRolletRepository/ChangePositionResponse")]
        void ChangePosition(int id, int change);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRolletRepository/ChangePosition", ReplyAction="http://tempuri.org/IRolletRepository/ChangePositionResponse")]
        System.Threading.Tasks.Task ChangePositionAsync(int id, int change);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRolletRepositoryChannel : BusinessLogic.Concrete.RolletRepository.IRolletRepository, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RolletRepositoryClient : System.ServiceModel.ClientBase<BusinessLogic.Concrete.RolletRepository.IRolletRepository>, BusinessLogic.Concrete.RolletRepository.IRolletRepository {
        
        public RolletRepositoryClient() {
        }
        
        public RolletRepositoryClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RolletRepositoryClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RolletRepositoryClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RolletRepositoryClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public BusinessLogic.Concrete.RolletRepository.Rollet[] GetRollets(string email) {
            return base.Channel.GetRollets(email);
        }
        
        public System.Threading.Tasks.Task<BusinessLogic.Concrete.RolletRepository.Rollet[]> GetRolletsAsync(string email) {
            return base.Channel.GetRolletsAsync(email);
        }
        
        public void UpdateRollet(BusinessLogic.Concrete.RolletRepository.Rollet rollet) {
            base.Channel.UpdateRollet(rollet);
        }
        
        public System.Threading.Tasks.Task UpdateRolletAsync(BusinessLogic.Concrete.RolletRepository.Rollet rollet) {
            return base.Channel.UpdateRolletAsync(rollet);
        }
        
        public void ChangePosition(int id, int change) {
            base.Channel.ChangePosition(id, change);
        }
        
        public System.Threading.Tasks.Task ChangePositionAsync(int id, int change) {
            return base.Channel.ChangePositionAsync(id, change);
        }
    }
}
